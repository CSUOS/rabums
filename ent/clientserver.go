// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/CSUOS/rabums/ent/clientserver"
)

// ClientServer is the model entity for the ClientServer schema.
type ClientServer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ClientName holds the value of the "client_name" field.
	ClientName string `json:"client_name,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Available holds the value of the "available" field.
	Available bool `json:"available,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClientServerQuery when eager-loading is set.
	Edges ClientServerEdges `json:"edges"`
}

// ClientServerEdges holds the relations/edges for other nodes in the graph.
type ClientServerEdges struct {
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Owner holds the value of the owner edge.
	Owner []*User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e ClientServerEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[0] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading.
func (e ClientServerEdges) OwnerOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClientServer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case clientserver.FieldAvailable:
			values[i] = &sql.NullBool{}
		case clientserver.FieldID:
			values[i] = &sql.NullInt64{}
		case clientserver.FieldClientName, clientserver.FieldToken, clientserver.FieldLink, clientserver.FieldDescription:
			values[i] = &sql.NullString{}
		case clientserver.FieldCreatedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ClientServer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClientServer fields.
func (cs *ClientServer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clientserver.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int(value.Int64)
		case clientserver.FieldClientName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_name", values[i])
			} else if value.Valid {
				cs.ClientName = value.String
			}
		case clientserver.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				cs.Token = value.String
			}
		case clientserver.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				cs.Link = value.String
			}
		case clientserver.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cs.Description = value.String
			}
		case clientserver.FieldAvailable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field available", values[i])
			} else if value.Valid {
				cs.Available = value.Bool
			}
		case clientserver.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cs.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryEvents queries the "events" edge of the ClientServer entity.
func (cs *ClientServer) QueryEvents() *EventQuery {
	return (&ClientServerClient{config: cs.config}).QueryEvents(cs)
}

// QueryOwner queries the "owner" edge of the ClientServer entity.
func (cs *ClientServer) QueryOwner() *UserQuery {
	return (&ClientServerClient{config: cs.config}).QueryOwner(cs)
}

// Update returns a builder for updating this ClientServer.
// Note that you need to call ClientServer.Unwrap() before calling this method if this ClientServer
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *ClientServer) Update() *ClientServerUpdateOne {
	return (&ClientServerClient{config: cs.config}).UpdateOne(cs)
}

// Unwrap unwraps the ClientServer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *ClientServer) Unwrap() *ClientServer {
	tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClientServer is not a transactional entity")
	}
	cs.config.driver = tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *ClientServer) String() string {
	var builder strings.Builder
	builder.WriteString("ClientServer(")
	builder.WriteString(fmt.Sprintf("id=%v", cs.ID))
	builder.WriteString(", client_name=")
	builder.WriteString(cs.ClientName)
	builder.WriteString(", token=")
	builder.WriteString(cs.Token)
	builder.WriteString(", link=")
	builder.WriteString(cs.Link)
	builder.WriteString(", description=")
	builder.WriteString(cs.Description)
	builder.WriteString(", available=")
	builder.WriteString(fmt.Sprintf("%v", cs.Available))
	builder.WriteString(", created_at=")
	builder.WriteString(cs.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ClientServers is a parsable slice of ClientServer.
type ClientServers []*ClientServer

func (cs ClientServers) config(cfg config) {
	for _i := range cs {
		cs[_i].config = cfg
	}
}
