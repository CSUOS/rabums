// Code generated by entc, DO NOT EDIT.

package event

import (
	"time"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEvent holds the string denoting the event field in the database.
	FieldEvent = "event"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"

	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeClientserver holds the string denoting the clientserver edge name in mutations.
	EdgeClientserver = "clientserver"

	// Table holds the table name of the event in the database.
	Table = "events"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "events"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "event_user"
	// ClientserverTable is the table the holds the clientserver relation/edge.
	ClientserverTable = "events"
	// ClientserverInverseTable is the table name for the ClientServer entity.
	// It exists in this package in order to avoid circular dependency with the "clientserver" package.
	ClientserverInverseTable = "client_servers"
	// ClientserverColumn is the table column denoting the clientserver relation/edge.
	ClientserverColumn = "event_clientserver"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldEvent,
	FieldMessage,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Event type.
var ForeignKeys = []string{
	"event_user",
	"event_clientserver",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultMessage holds the default value on creation for the "message" field.
	DefaultMessage string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
