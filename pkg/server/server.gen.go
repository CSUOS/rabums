// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
)

// ClientInfo defines model for ClientInfo.
type ClientInfo struct {

	// identification of client
	ClientID *int `json:"clientID,omitempty"`

	// name of the client
	ClientName  string  `json:"clientName"`
	Description string  `json:"description"`
	Link        string  `json:"link"`
	Token       *string `json:"token,omitempty"`
	Valid       bool    `json:"valid"`
}

// CreateClientRequest defines model for CreateClientRequest.
type CreateClientRequest struct {
	// Embedded struct due to allOf(#/components/schemas/ClientInfo)
	ClientInfo `yaml:",inline"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	// Embedded struct due to allOf(#/components/schemas/UserInfo)
	UserInfo `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// token sent by email
	Token string `json:"token"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	UserID string `json:"userID"`
	UserPW string `json:"userPW"`
}

// Logs defines model for Logs.
type Logs []struct {

	// event type
	Event string `json:"event"`

	// event time
	Time string `json:"time"`
}

// Reason defines model for Reason.
type Reason struct {
	Reason string `json:"reason"`
}

// RequestToken defines model for RequestToken.
type RequestToken struct {

	// email address to send token
	Email string `json:"email"`

	// userID to sign the token
	UserID string `json:"userID"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	// Embedded struct due to allOf(#/components/schemas/UserInfo)
	UserInfo `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// previous password
	PreviousPassword string `json:"previousPassword"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {

	// internal identification id
	Id *int `json:"id,omitempty"`

	// user email
	UserEmail string `json:"userEmail"`

	// user id
	UserID string `json:"userID"`

	// real world name of the user
	UserName string `json:"userName"`

	// 학번
	UserNumber int `json:"userNumber"`

	// place holder for user pw
	UserPW *string `json:"userPW,omitempty"`
}

// CreateClientJSONBody defines parameters for CreateClient.
type CreateClientJSONBody CreateClientRequest

// GetUserInfoByClientTokenJSONBody defines parameters for GetUserInfoByClientToken.
type GetUserInfoByClientTokenJSONBody struct {

	// client token to auth
	Token string `json:"token"`

	// userID to get user info
	UserID string `json:"userID"`

	// userPW to get user info
	UserPW string `json:"userPW"`
}

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody LoginRequest

// RequestTokenJSONBody defines parameters for RequestToken.
type RequestTokenJSONBody RequestToken

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody UpdateUserRequest

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody CreateUserRequest

// CreateClientJSONRequestBody defines body for CreateClient for application/json ContentType.
type CreateClientJSONRequestBody CreateClientJSONBody

// GetUserInfoByClientTokenJSONRequestBody defines body for GetUserInfoByClientToken for application/json ContentType.
type GetUserInfoByClientTokenJSONRequestBody GetUserInfoByClientTokenJSONBody

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody LoginUserJSONBody

// RequestTokenJSONRequestBody defines body for RequestToken for application/json ContentType.
type RequestTokenJSONRequestBody RequestTokenJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get client list
	// (GET /v1/client)
	GetClientList(w http.ResponseWriter, r *http.Request)
	// request for registration
	// (PUT /v1/client)
	CreateClient(w http.ResponseWriter, r *http.Request)
	// get user info with client token
	// (POST /v1/client/user)
	GetUserInfoByClientToken(w http.ResponseWriter, r *http.Request)
	// delete client
	// (DELETE /v1/client/{clientID})
	DeleteClient(w http.ResponseWriter, r *http.Request, clientID string)
	// Logs in user
	// (POST /v1/login)
	LoginUser(w http.ResponseWriter, r *http.Request)
	// Log out user by clear cookie
	// (GET /v1/logout)
	LogoutUser(w http.ResponseWriter, r *http.Request)
	// get login history for user
	// (GET /v1/logs)
	GetUserLogs(w http.ResponseWriter, r *http.Request)
	// ping check
	// (GET /v1/ping)
	PingPong(w http.ResponseWriter, r *http.Request)
	// request token for registration
	// (POST /v1/token)
	RequestToken(w http.ResponseWriter, r *http.Request)
	// get user info
	// (GET /v1/user)
	GetUser(w http.ResponseWriter, r *http.Request)
	// update user info
	// (POST /v1/user)
	UpdateUser(w http.ResponseWriter, r *http.Request)
	// request for registration
	// (PUT /v1/user)
	CreateUser(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetClientList operation middleware
func (siw *ServerInterfaceWrapper) GetClientList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClientList(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateClient operation middleware
func (siw *ServerInterfaceWrapper) CreateClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateClient(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUserInfoByClientToken operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfoByClientToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserInfoByClientToken(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteClient operation middleware
func (siw *ServerInterfaceWrapper) DeleteClient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "clientID" -------------
	var clientID string

	err = runtime.BindStyledParameter("simple", false, "clientID", chi.URLParam(r, "clientID"), &clientID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter clientID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteClient(w, r, clientID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUserLogs operation middleware
func (siw *ServerInterfaceWrapper) GetUserLogs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserLogs(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PingPong operation middleware
func (siw *ServerInterfaceWrapper) PingPong(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PingPong(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RequestToken operation middleware
func (siw *ServerInterfaceWrapper) RequestToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RequestToken(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/client", wrapper.GetClientList)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/client", wrapper.CreateClient)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/client/user", wrapper.GetUserInfoByClientToken)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/client/{clientID}", wrapper.DeleteClient)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/logout", wrapper.LogoutUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/logs", wrapper.GetUserLogs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/ping", wrapper.PingPong)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/token", wrapper.RequestToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/user", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/user", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/user", wrapper.CreateUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"pYfMHQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
