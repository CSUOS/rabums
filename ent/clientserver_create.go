// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/CSUOS/rabums/ent/clientserver"
	"github.com/CSUOS/rabums/ent/event"
	"github.com/CSUOS/rabums/ent/user"
)

// ClientServerCreate is the builder for creating a ClientServer entity.
type ClientServerCreate struct {
	config
	mutation *ClientServerMutation
	hooks    []Hook
}

// SetClientName sets the "client_name" field.
func (csc *ClientServerCreate) SetClientName(s string) *ClientServerCreate {
	csc.mutation.SetClientName(s)
	return csc
}

// SetToken sets the "token" field.
func (csc *ClientServerCreate) SetToken(s string) *ClientServerCreate {
	csc.mutation.SetToken(s)
	return csc
}

// SetLink sets the "link" field.
func (csc *ClientServerCreate) SetLink(s string) *ClientServerCreate {
	csc.mutation.SetLink(s)
	return csc
}

// SetDescription sets the "description" field.
func (csc *ClientServerCreate) SetDescription(s string) *ClientServerCreate {
	csc.mutation.SetDescription(s)
	return csc
}

// SetAvailable sets the "available" field.
func (csc *ClientServerCreate) SetAvailable(b bool) *ClientServerCreate {
	csc.mutation.SetAvailable(b)
	return csc
}

// SetCreatedAt sets the "created_at" field.
func (csc *ClientServerCreate) SetCreatedAt(t time.Time) *ClientServerCreate {
	csc.mutation.SetCreatedAt(t)
	return csc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csc *ClientServerCreate) SetNillableCreatedAt(t *time.Time) *ClientServerCreate {
	if t != nil {
		csc.SetCreatedAt(*t)
	}
	return csc
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (csc *ClientServerCreate) AddEventIDs(ids ...int) *ClientServerCreate {
	csc.mutation.AddEventIDs(ids...)
	return csc
}

// AddEvents adds the "events" edges to the Event entity.
func (csc *ClientServerCreate) AddEvents(e ...*Event) *ClientServerCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csc.AddEventIDs(ids...)
}

// AddOwnerIDs adds the "owner" edge to the User entity by IDs.
func (csc *ClientServerCreate) AddOwnerIDs(ids ...int) *ClientServerCreate {
	csc.mutation.AddOwnerIDs(ids...)
	return csc
}

// AddOwner adds the "owner" edges to the User entity.
func (csc *ClientServerCreate) AddOwner(u ...*User) *ClientServerCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return csc.AddOwnerIDs(ids...)
}

// Mutation returns the ClientServerMutation object of the builder.
func (csc *ClientServerCreate) Mutation() *ClientServerMutation {
	return csc.mutation
}

// Save creates the ClientServer in the database.
func (csc *ClientServerCreate) Save(ctx context.Context) (*ClientServer, error) {
	var (
		err  error
		node *ClientServer
	)
	csc.defaults()
	if len(csc.hooks) == 0 {
		if err = csc.check(); err != nil {
			return nil, err
		}
		node, err = csc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClientServerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = csc.check(); err != nil {
				return nil, err
			}
			csc.mutation = mutation
			node, err = csc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(csc.hooks) - 1; i >= 0; i-- {
			mut = csc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (csc *ClientServerCreate) SaveX(ctx context.Context) *ClientServer {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (csc *ClientServerCreate) defaults() {
	if _, ok := csc.mutation.CreatedAt(); !ok {
		v := clientserver.DefaultCreatedAt()
		csc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *ClientServerCreate) check() error {
	if _, ok := csc.mutation.ClientName(); !ok {
		return &ValidationError{Name: "client_name", err: errors.New("ent: missing required field \"client_name\"")}
	}
	if _, ok := csc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New("ent: missing required field \"token\"")}
	}
	if _, ok := csc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New("ent: missing required field \"link\"")}
	}
	if _, ok := csc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New("ent: missing required field \"description\"")}
	}
	if _, ok := csc.mutation.Available(); !ok {
		return &ValidationError{Name: "available", err: errors.New("ent: missing required field \"available\"")}
	}
	if _, ok := csc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	return nil
}

func (csc *ClientServerCreate) sqlSave(ctx context.Context) (*ClientServer, error) {
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (csc *ClientServerCreate) createSpec() (*ClientServer, *sqlgraph.CreateSpec) {
	var (
		_node = &ClientServer{config: csc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: clientserver.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: clientserver.FieldID,
			},
		}
	)
	if value, ok := csc.mutation.ClientName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clientserver.FieldClientName,
		})
		_node.ClientName = value
	}
	if value, ok := csc.mutation.Token(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clientserver.FieldToken,
		})
		_node.Token = value
	}
	if value, ok := csc.mutation.Link(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clientserver.FieldLink,
		})
		_node.Link = value
	}
	if value, ok := csc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clientserver.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := csc.mutation.Available(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: clientserver.FieldAvailable,
		})
		_node.Available = value
	}
	if value, ok := csc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: clientserver.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := csc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   clientserver.EventsTable,
			Columns: []string{clientserver.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   clientserver.OwnerTable,
			Columns: clientserver.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClientServerCreateBulk is the builder for creating many ClientServer entities in bulk.
type ClientServerCreateBulk struct {
	config
	builders []*ClientServerCreate
}

// Save creates the ClientServer entities in the database.
func (cscb *ClientServerCreateBulk) Save(ctx context.Context) ([]*ClientServer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*ClientServer, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClientServerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *ClientServerCreateBulk) SaveX(ctx context.Context) []*ClientServer {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
